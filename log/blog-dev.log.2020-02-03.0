2020-02-03 16:35:58.827  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 21404 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 16:35:58.851 DEBUG 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 16:35:58.851  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 16:35:58.974  INFO 21404 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 16:35:58.975  INFO 21404 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 16:35:58.976  INFO 21404 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 16:36:01.839  INFO 21404 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 16:36:02.067  INFO 21404 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 207ms. Found 4 JPA repository interfaces.
2020-02-03 16:36:02.990  INFO 21404 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 16:36:04.325  INFO 21404 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 16:36:04.383  INFO 21404 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 16:36:04.383  INFO 21404 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 16:36:04.646  INFO 21404 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 16:36:04.646  INFO 21404 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 5670 ms
2020-02-03 16:36:05.407  INFO 21404 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 16:36:05.588  INFO 21404 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 16:36:05.970  INFO 21404 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 16:36:06.377  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 16:36:10.695  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 16:36:10.913  INFO 21404 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 16:36:13.274  INFO 21404 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 16:36:13.287  INFO 21404 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:36:13.326  INFO 21404 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 16:36:14.617  WARN 21404 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 16:36:14.961  INFO 21404 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 16:36:16.524  INFO 21404 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 16:36:16.538  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 19.9 seconds (JVM running for 30.426)
2020-02-03 16:36:50.385  INFO 21404 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 16:36:50.385  INFO 21404 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 16:36:50.402  INFO 21404 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2020-02-03 16:36:50.469  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:36:50.470  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.web.IndexController.index', args=[]}
2020-02-03 16:36:50.471  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:index
2020-02-03 16:36:50.871 ERROR 21404 --- [http-nio-8080-exec-1] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-1] Exception processing template "index": Error resolving template [index], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [index], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-03 16:36:50.898 ERROR 21404 --- [http-nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [index], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [index], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-03 16:37:02.966  INFO 21404 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:37:02.966  INFO 21404 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 16:37:02.967  INFO 21404 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 16:37:02.967  INFO 21404 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:37:02.967  INFO 21404 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 16:37:02.967  INFO 21404 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 16:37:19.113  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:37:19.113  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs;jsessionid=78E7A1137E4CD7DBCA783F49EEA2B15A', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@61e3a78f, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:37:19.114  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:37:19.114  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:37:19.114  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs;jsessionid=78E7A1137E4CD7DBCA783F49EEA2B15A', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 16:37:19.114  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:37:19.147  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:37:19.147  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs;jsessionid=78E7A1137E4CD7DBCA783F49EEA2B15A', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 16:37:19.147  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 16:37:23.208  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:37:23.208  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@1aed3272, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:37:23.209  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:37:23.209  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:37:23.209  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 16:37:23.209  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:37:25.707  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:37:25.707  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@403a651b, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:37:25.708  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:37:25.709  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:37:25.709  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 16:37:25.709  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:38:48.868  INFO 21404 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:38:48.868  INFO 21404 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6d5f32f6, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:38:48.869  INFO 21404 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:38:48.869  INFO 21404 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:38:48.869  INFO 21404 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=2, recommend=false)]}
2020-02-03 16:38:48.869  INFO 21404 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:38:52.392  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:38:52.393  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@18de3b65, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:38:52.393  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:38:52.393  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:38:52.393  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=5, recommend=false)]}
2020-02-03 16:38:52.394  INFO 21404 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:38:55.480  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:38:55.480  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@7f562ca2, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:38:55.481  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 0 containing UNKNOWN instances
2020-02-03 16:38:55.481  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:38:55.481  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=6, recommend=false)]}
2020-02-03 16:38:55.482  INFO 21404 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 0 containing UNKNOWN instances
2020-02-03 16:38:57.949  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:38:57.950  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@4a039e40, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:38:57.950  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:38:57.950  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:38:57.950  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=2, recommend=false)]}
2020-02-03 16:38:57.950  INFO 21404 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:42:55.597  INFO 21404 --- [Thread-40] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-03 16:42:55.598  INFO 21404 --- [Thread-40] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:42:55.602  INFO 21404 --- [Thread-40] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-02-03 16:42:55.616  INFO 21404 --- [Thread-40] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-02-03 16:42:57.993  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 21404 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 16:42:57.993 DEBUG 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 16:42:57.993  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 16:42:58.227  INFO 21404 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 16:42:58.252  INFO 21404 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 25ms. Found 4 JPA repository interfaces.
2020-02-03 16:42:58.353  INFO 21404 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 16:42:58.647  INFO 21404 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 16:42:58.648  INFO 21404 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 16:42:58.648  INFO 21404 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 16:42:58.703  INFO 21404 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 16:42:58.704  INFO 21404 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 705 ms
2020-02-03 16:42:58.774  INFO 21404 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 16:42:58.778  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2020-02-03 16:42:58.808  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2020-02-03 16:42:58.809  INFO 21404 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 16:42:59.017  INFO 21404 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 16:42:59.017  INFO 21404 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:42:59.035  INFO 21404 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 16:42:59.345  WARN 21404 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogController': Unsatisfied dependency expressed through field 'blogService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.bob.blog.service.BlogService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2020-02-03 16:42:59.346  INFO 21404 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:42:59.346  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...
2020-02-03 16:42:59.355  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.
2020-02-03 16:42:59.356  INFO 21404 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-02-03 16:42:59.366  INFO 21404 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-02-03 16:42:59.613 ERROR 21404 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field blogService in com.bob.blog.web.admin.BlogController required a bean of type 'com.bob.blog.service.BlogService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.bob.blog.service.BlogService' in your configuration.

2020-02-03 16:45:52.928  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 21404 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 16:45:52.929 DEBUG 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 16:45:52.929  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 16:45:53.313  INFO 21404 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 16:45:53.342  INFO 21404 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 28ms. Found 4 JPA repository interfaces.
2020-02-03 16:45:53.417  INFO 21404 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 16:45:53.759  INFO 21404 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 16:45:53.760  INFO 21404 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 16:45:53.760  INFO 21404 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 16:45:53.808  INFO 21404 --- [restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-02-03 16:45:53.808  INFO 21404 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 875 ms
2020-02-03 16:45:53.892  INFO 21404 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 16:45:53.897  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
2020-02-03 16:45:53.921  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
2020-02-03 16:45:53.921  INFO 21404 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 16:45:54.184  INFO 21404 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 16:45:54.184  INFO 21404 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:45:54.201  INFO 21404 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 16:45:54.456  WARN 21404 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'blogController': Unsatisfied dependency expressed through field 'blogService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.bob.blog.service.BlogService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2020-02-03 16:45:54.457  INFO 21404 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:45:54.457  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Shutdown initiated...
2020-02-03 16:45:54.469  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Shutdown completed.
2020-02-03 16:45:54.470  INFO 21404 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-02-03 16:45:54.481  INFO 21404 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-02-03 16:45:54.576 ERROR 21404 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field blogService in com.bob.blog.web.admin.BlogController required a bean of type 'com.bob.blog.service.BlogService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.bob.blog.service.BlogService' in your configuration.

2020-02-03 16:45:57.459  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 21404 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 16:45:57.460 DEBUG 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 16:45:57.460  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 16:45:57.682  INFO 21404 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 16:45:57.710  INFO 21404 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 28ms. Found 4 JPA repository interfaces.
2020-02-03 16:45:57.767  INFO 21404 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 16:45:58.038  INFO 21404 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 16:45:58.039  INFO 21404 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 16:45:58.039  INFO 21404 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 16:45:58.095  INFO 21404 --- [restartedMain] o.a.c.c.C.[Tomcat-2].[localhost].[/]     : Initializing Spring embedded WebApplicationContext
2020-02-03 16:45:58.095  INFO 21404 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 631 ms
2020-02-03 16:45:58.172  INFO 21404 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 16:45:58.176  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-4 - Starting...
2020-02-03 16:45:58.192  INFO 21404 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-4 - Start completed.
2020-02-03 16:45:58.192  INFO 21404 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 16:45:58.568  INFO 21404 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 16:45:58.568  INFO 21404 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:45:58.585  INFO 21404 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 16:45:58.912  WARN 21404 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 16:45:59.119  INFO 21404 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 16:45:59.687  INFO 21404 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 16:45:59.689  INFO 21404 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 2.267 seconds (JVM running for 613.578)
2020-02-03 16:45:59.694  INFO 21404 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-02-03 16:46:08.348  INFO 18336 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 18336 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 16:46:08.352 DEBUG 18336 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 16:46:08.352  INFO 18336 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 16:46:08.411  INFO 18336 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 16:46:08.411  INFO 18336 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 16:46:08.411  INFO 18336 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 16:46:09.146  INFO 18336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 16:46:09.239  INFO 18336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 81ms. Found 4 JPA repository interfaces.
2020-02-03 16:46:09.616  INFO 18336 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 16:46:10.167  INFO 18336 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 16:46:10.177  INFO 18336 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 16:46:10.177  INFO 18336 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 16:46:10.349  INFO 18336 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 16:46:10.350  INFO 18336 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1938 ms
2020-02-03 16:46:10.667  INFO 18336 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 16:46:10.733  INFO 18336 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 16:46:10.853  INFO 18336 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 16:46:10.960  INFO 18336 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 16:46:13.110  INFO 18336 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 16:46:13.130  INFO 18336 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 16:46:14.321  INFO 18336 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 16:46:14.328  INFO 18336 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:46:14.356  INFO 18336 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 16:46:14.978  WARN 18336 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 16:46:15.213  INFO 18336 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 16:46:15.891  INFO 18336 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 16:46:15.894  INFO 18336 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 8.208 seconds (JVM running for 12.593)
2020-02-03 16:46:30.991  INFO 18336 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 16:46:30.992  INFO 18336 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 16:46:31.013  INFO 18336 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 21 ms
2020-02-03 16:46:35.310  INFO 18336 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:35.310  INFO 18336 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 16:46:35.310  INFO 18336 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 16:46:35.311  INFO 18336 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:35.311  INFO 18336 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 16:46:35.311  INFO 18336 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 16:46:41.251  INFO 18336 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:41.251  INFO 18336 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@2fd02bff, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:46:41.252  INFO 18336 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:46:41.252  INFO 18336 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:41.252  INFO 18336 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 16:46:41.253  INFO 18336 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:46:41.275  INFO 18336 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:41.276  INFO 18336 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 16:46:41.276  INFO 18336 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 16:46:49.369  INFO 18336 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:49.369  INFO 18336 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@2f244a7a, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:46:49.369  INFO 18336 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:46:49.370  INFO 18336 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:49.370  INFO 18336 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 16:46:49.370  INFO 18336 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:46:52.944  INFO 18336 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:52.944  INFO 18336 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@4256bc3a, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:46:52.944  INFO 18336 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:46:52.944  INFO 18336 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:52.944  INFO 18336 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 16:46:52.945  INFO 18336 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:46:58.384  INFO 18336 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:58.384  INFO 18336 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@1550d12b, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:46:58.384  INFO 18336 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:46:58.384  INFO 18336 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:46:58.384  INFO 18336 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 16:46:58.384  INFO 18336 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:48:20.955  INFO 18336 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:48:20.955  INFO 18336 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@33595b90, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:48:20.956  INFO 18336 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:48:20.956  INFO 18336 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:48:20.956  INFO 18336 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 16:48:20.956  INFO 18336 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:48:24.643  INFO 18336 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:48:24.643  INFO 18336 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@789b0d0, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:48:24.644  INFO 18336 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:48:24.644  INFO 18336 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:48:24.644  INFO 18336 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 16:48:24.644  INFO 18336 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:48:50.182  INFO 14340 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 14340 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 16:48:50.188 DEBUG 14340 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 16:48:50.189  INFO 14340 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 16:48:50.304  INFO 14340 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 16:48:50.306  INFO 14340 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 16:48:50.308  INFO 14340 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 16:48:51.327  INFO 14340 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 16:48:51.449  INFO 14340 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 105ms. Found 4 JPA repository interfaces.
2020-02-03 16:48:51.859  INFO 14340 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 16:48:52.582  INFO 14340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 16:48:52.593  INFO 14340 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 16:48:52.593  INFO 14340 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 16:48:52.833  INFO 14340 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 16:48:52.833  INFO 14340 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2524 ms
2020-02-03 16:48:53.159  INFO 14340 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 16:48:53.247  INFO 14340 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 16:48:53.421  INFO 14340 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 16:48:53.583  INFO 14340 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 16:48:56.075  INFO 14340 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 16:48:56.098  INFO 14340 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 16:48:57.400  INFO 14340 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 16:48:57.410  INFO 14340 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:48:57.442  INFO 14340 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 16:48:58.253  WARN 14340 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 16:48:58.532  INFO 14340 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 16:48:59.358  INFO 14340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 16:48:59.360  INFO 14340 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 10.061 seconds (JVM running for 14.953)
2020-02-03 16:50:28.694  INFO 14340 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 16:50:28.695  INFO 14340 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 16:50:28.712  INFO 14340 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2020-02-03 16:51:04.222  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:51:04.223  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 16:51:04.223  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 16:51:04.224  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:51:04.224  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 16:51:04.224  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 16:51:08.258  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:51:08.258  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@73b47e9e, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:51:08.259  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:51:08.259  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:51:08.259  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 16:51:08.259  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:51:08.284  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:51:08.284  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 16:51:08.284  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 16:51:13.670  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:51:13.670  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6deab9d6, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:51:13.671  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:51:13.671  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:51:13.671  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 16:51:13.671  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:51:19.463  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:51:19.463  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6ad862d6, Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-03 16:51:19.463  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:51:19.463  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:51:19.463  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 16:51:19.463  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Blog instances
2020-02-03 16:54:55.483  INFO 14340 --- [Thread-22] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-03 16:54:55.484  INFO 14340 --- [Thread-22] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:54:55.487  INFO 14340 --- [Thread-22] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-02-03 16:54:55.501  INFO 14340 --- [Thread-22] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-02-03 16:54:57.892  INFO 14340 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 14340 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 16:54:57.893 DEBUG 14340 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 16:54:57.893  INFO 14340 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 16:54:58.170  INFO 14340 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 16:54:58.210  INFO 14340 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 40ms. Found 4 JPA repository interfaces.
2020-02-03 16:54:58.270  INFO 14340 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 16:54:58.560  INFO 14340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 16:54:58.561  INFO 14340 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 16:54:58.562  INFO 14340 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 16:54:58.608  INFO 14340 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 16:54:58.608  INFO 14340 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 711 ms
2020-02-03 16:54:58.686  INFO 14340 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 16:54:58.691  INFO 14340 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2020-02-03 16:54:58.709  INFO 14340 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2020-02-03 16:54:58.709  INFO 14340 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 16:54:59.009  INFO 14340 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 16:54:59.009  INFO 14340 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 16:54:59.023  INFO 14340 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 16:54:59.297  WARN 14340 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 16:54:59.440  INFO 14340 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 16:54:59.768  INFO 14340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 16:54:59.769  INFO 14340 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 1.927 seconds (JVM running for 375.361)
2020-02-03 16:54:59.772  INFO 14340 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-02-03 16:55:02.588  INFO 14340 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 16:55:02.594  INFO 14340 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 16:55:02.626  INFO 14340 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 31 ms
2020-02-03 16:55:07.161  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:07.162  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 16:55:07.162  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 16:55:07.162  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:07.162  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 16:55:07.162  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 16:55:09.667  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:09.667  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@53ccac67, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 16:55:09.668  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 16:55:09.668  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:09.669  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 16:55:09.669  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 16:55:09.682  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:09.682  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 16:55:09.682  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 16:55:11.450  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:11.451  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@65d49001, Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-03 16:55:11.451  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 16:55:11.451  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:11.451  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 16:55:11.451  INFO 14340 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 16:55:18.150  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:18.150  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@d91d2cd, Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-03 16:55:18.150  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 16:55:18.151  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:18.151  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 16:55:18.151  INFO 14340 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 16:55:19.779  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:19.779  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@76c8a001, Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-03 16:55:19.779  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 16:55:19.780  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:19.780  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 16:55:19.780  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 16:55:21.453  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:21.453  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@33647136, Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-03 16:55:21.454  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 16:55:21.456  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:21.457  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 16:55:21.458  INFO 14340 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 16:55:27.992  INFO 14340 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:27.992  INFO 14340 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6e717af8, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 16:55:27.992  INFO 14340 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 16:55:27.993  INFO 14340 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:27.993  INFO 14340 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 16:55:27.993  INFO 14340 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 16:55:28.004  INFO 14340 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 16:55:28.004  INFO 14340 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 16:55:28.005  INFO 14340 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:01:39.735  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:01:39.735  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@5c390bad, Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-03 17:01:39.735  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 17:01:39.736  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:01:39.736  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:01:39.736  INFO 14340 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 17:01:49.085  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:01:49.086  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@12a014f0, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:01:49.086  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:01:49.086  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:01:49.087  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:01:49.087  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:01:49.100  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:01:49.101  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:01:49.101  INFO 14340 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:02:10.753  INFO 14340 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:02:10.753  INFO 14340 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@7a0e5e44, Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-03 17:02:10.753  INFO 14340 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 17:02:10.754  INFO 14340 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:02:10.754  INFO 14340 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 5, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:02:10.754  INFO 14340 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 1 containing UNKNOWN instances
2020-02-03 17:06:15.683  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:06:15.684  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@18d69e32, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:06:15.684  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:06:15.684  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:06:15.684  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:06:15.684  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:06:15.689  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:06:15.689  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:06:15.690  INFO 14340 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:08:14.829  INFO 15120 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 15120 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 17:08:14.833 DEBUG 15120 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 17:08:14.834  INFO 15120 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 17:08:14.902  INFO 15120 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 17:08:14.902  INFO 15120 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 17:08:14.903  INFO 15120 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 17:08:15.809  INFO 15120 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 17:08:15.902  INFO 15120 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 83ms. Found 4 JPA repository interfaces.
2020-02-03 17:08:16.278  INFO 15120 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 17:08:16.844  INFO 15120 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 17:08:16.853  INFO 15120 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 17:08:16.853  INFO 15120 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 17:08:17.025  INFO 15120 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 17:08:17.025  INFO 15120 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2122 ms
2020-02-03 17:08:17.309  INFO 15120 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 17:08:17.378  INFO 15120 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 17:08:17.505  INFO 15120 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 17:08:17.633  INFO 15120 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 17:08:19.843  INFO 15120 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 17:08:19.863  INFO 15120 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 17:08:21.362  INFO 15120 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 17:08:21.375  INFO 15120 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 17:08:21.417  INFO 15120 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 17:08:22.151  WARN 15120 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 17:08:22.406  INFO 15120 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 17:08:23.140  INFO 15120 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 17:08:23.142  INFO 15120 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 9.049 seconds (JVM running for 12.511)
2020-02-03 17:08:27.729  INFO 15120 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 17:08:27.730  INFO 15120 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 17:08:27.744  INFO 15120 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-02-03 17:08:34.743  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:34.744  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 17:08:34.744  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 17:08:34.745  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:34.745  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 17:08:34.745  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 17:08:41.550  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:41.550  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@2f97c64b, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:08:41.551  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:41.552  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:41.552  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:08:41.552  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:41.579  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:41.579  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:08:41.579  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:08:44.506  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:44.507  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@3c92cb4d, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:08:44.507  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:44.507  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:44.507  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:08:44.508  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:46.095  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:46.096  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@7e30fd98, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:08:46.096  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:46.096  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:46.097  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:08:46.097  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:48.734  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:48.735  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@2bd870c1, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:08:48.735  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:48.735  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:48.735  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:08:48.736  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:49.793  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:49.793  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@97a71df, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:08:49.794  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:49.794  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:49.794  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:08:49.794  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:54.251  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:54.251  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@72952020, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:08:54.251  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:54.251  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:54.251  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:08:54.251  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:55.910  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:55.911  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@178dd0d0, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:08:55.911  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:55.911  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:55.911  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:08:55.912  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:57.370  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:57.370  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@4e17b218, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:08:57.370  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:08:57.370  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:08:57.370  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:08:57.370  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:00.071  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:00.072  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@69d2a321, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:09:00.072  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:00.072  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:00.072  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:09:00.073  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:01.659  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:01.660  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6375234a, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:09:01.660  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:01.661  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:01.661  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:09:01.661  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:02.526  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:02.527  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@82562f4, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:09:02.527  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:02.527  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:02.527  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:09:02.527  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:03.151  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:03.151  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@4687ab2e, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:09:03.152  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:03.152  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:03.152  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:09:03.152  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:03.741  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:03.741  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@58ee577c, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:09:03.742  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:03.742  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:03.742  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:09:03.742  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:04.280  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:04.280  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@55266335, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:09:04.281  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:04.281  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:04.281  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:09:04.282  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:04.727  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:04.728  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@10af6af0, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:09:04.728  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:04.728  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:04.728  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:09:04.728  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:05.313  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:05.313  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@48b4c5cb, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:09:05.314  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:05.314  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:05.314  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:09:05.314  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:05.873  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:05.873  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@be7899f, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:09:05.873  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:09:05.874  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:09:05.874  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:09:05.874  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:44.856  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:44.856  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@5feaa79b, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:44.857  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:44.857  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:44.857  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:10:44.857  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:46.607  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:46.607  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@7c8838fa, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:46.608  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:46.608  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:46.608  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:10:46.608  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:48.929  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:48.929  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@f6aeb4b, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:48.930  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:48.930  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:48.930  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:10:48.931  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:51.067  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:51.067  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@4bbff61c, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:51.067  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:51.068  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:51.068  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:10:51.068  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:52.631  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:52.632  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@771e03d0, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:52.632  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:52.632  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:52.632  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:10:52.632  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:53.847  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:53.847  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@418a64ce, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:53.847  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:53.848  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:53.848  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:10:53.848  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:55.686  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:55.686  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@99960cd, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:55.686  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:55.686  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:55.686  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:10:55.686  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:57.195  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:57.195  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@171af6d9, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:57.195  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:57.195  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:57.196  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:10:57.196  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:57.886  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:57.887  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@61e5c76f, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:57.887  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:57.887  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:57.887  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:10:57.887  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:58.506  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:58.506  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@420eac07, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:58.506  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:58.506  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:58.506  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:10:58.506  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:59.241  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:59.242  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@3a6d2426, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:10:59.242  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:10:59.242  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:10:59.242  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:10:59.243  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:00.284  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:00.285  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@1fe06f15, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:00.285  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:00.285  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:00.285  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:11:00.285  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:01.851  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:01.851  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@3393dede, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:01.852  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:01.852  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:01.852  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:11:01.852  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:04.157  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:04.157  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@72a81d71, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:04.157  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:04.157  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:04.157  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:11:04.157  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:05.192  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:05.192  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@2b6df112, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:05.192  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:05.193  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:05.193  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:11:05.193  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:05.819  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:05.819  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@2081ec4d, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:05.819  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:05.820  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:05.820  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:11:05.820  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:07.063  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:07.063  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@3500b354, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:07.063  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:07.064  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:07.064  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:11:07.064  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:09.050  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:09.050  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@58f33f13, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:09.050  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:09.051  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:09.051  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:11:09.051  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:12.093  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:12.093  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@1e432790, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:12.093  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:12.093  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:12.093  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:11:12.093  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:13.156  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:13.157  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@77f6dea0, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:13.157  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:13.157  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:13.157  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:11:13.158  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:14.484  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:14.484  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@126d62a, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:14.484  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:14.485  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:14.485  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:11:14.485  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:29.515  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:29.515  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@5e5e648d, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:29.515  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:29.515  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:29.515  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:11:29.515  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:30.795  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:30.795  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@2d5d0054, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:30.795  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:30.795  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:30.795  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:11:30.796  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:34.031  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:34.031  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@5e80f038, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:34.031  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:34.031  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:34.031  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:11:34.031  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:35.361  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:35.362  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@662d86a0, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:35.362  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:35.362  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:35.362  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:11:35.362  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:38.066  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:38.067  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@5f2e1492, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:38.067  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:38.067  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:38.067  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:11:38.067  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:43.283  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:43.283  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@75652384, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:43.283  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:43.284  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:43.284  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:11:43.284  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:45.251  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:45.251  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6085eebc, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:11:45.252  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:11:45.252  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:11:45.252  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:11:45.252  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:12:14.365  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:12:14.366  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@25e9469d, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:12:14.366  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:12:14.366  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:12:14.366  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:12:14.367  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:12:15.719  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:12:15.719  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@57115b24, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:12:15.719  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:12:15.719  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:12:15.719  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:12:15.719  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:12:17.851  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:12:17.851  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@73dd25fa, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:12:17.851  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:12:17.852  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:12:17.852  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:12:17.852  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:12:19.213  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:12:19.213  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@37e0df8d, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:12:19.213  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:12:19.214  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:12:19.214  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:12:19.214  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:14:49.220  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:14:49.220  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@a3205fb, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:14:49.220  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:14:49.220  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:14:49.220  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:14:49.220  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:14:50.027  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:14:50.027  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@4188bd4d, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:14:50.027  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:14:50.027  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:14:50.027  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:14:50.027  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:14:50.740  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:14:50.740  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@b80522f, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:14:50.740  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:14:50.740  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:14:50.740  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:14:50.740  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:14:51.289  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:14:51.290  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@627c57e0, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:14:51.290  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:14:51.290  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:14:51.290  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:14:51.290  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:01.308  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:01.308  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6b1ccabe, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:15:01.309  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:01.309  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:01.309  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:15:01.309  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:01.312  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:01.312  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:15:01.312  INFO 15120 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:15:03.881  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:03.882  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6c019f1f, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:15:03.882  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:03.882  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:03.882  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 17:15:03.882  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:06.500  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:06.501  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@d78ec19, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:15:06.501  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:06.501  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:06.501  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:15:06.501  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:09.004  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:09.004  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@7bc5c15b, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:15:09.005  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:09.005  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:09.005  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:15:09.005  INFO 15120 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:10.416  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:10.416  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@298bc236, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:15:10.417  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:10.417  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:10.417  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:15:10.417  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:11.678  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:11.678  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@4eb2bccc, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 17:15:11.678  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:11.678  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:11.678  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:15:11.678  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:13.007  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:13.007  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@7954e940, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:15:13.008  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:15:13.008  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:15:13.008  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=true)]}
2020-02-03 17:15:13.008  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:16:05.129  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:16:05.129  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@ae7b00c, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:16:05.131  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:16:05.131  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:16:05.131  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=2, recommend=true)]}
2020-02-03 17:16:05.132  INFO 15120 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:16:06.764  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:16:06.764  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@46f9f989, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:16:06.765  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:16:06.765  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:16:06.765  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=2, recommend=true)]}
2020-02-03 17:16:06.765  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:21:04.391  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:04.391  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6050e5af, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:21:04.391  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:21:04.392  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:04.392  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:21:04.392  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:21:04.399  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:04.400  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:21:04.400  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:21:17.894  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:17.894  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@539d1b87, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:21:17.894  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:21:17.894  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:17.894  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:21:17.895  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:21:17.898  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:17.898  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:21:17.898  INFO 15120 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:21:36.967  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:36.968  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@554759ef, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:21:36.970  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:21:36.970  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:36.971  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:21:36.971  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:21:36.976  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:36.976  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:21:36.976  INFO 15120 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:21:37.027  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:37.027  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@3e01b4c1, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:21:37.027  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:21:37.027  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:37.027  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:21:37.027  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:21:37.030  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:21:37.030  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:21:37.030  INFO 15120 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:22:43.111  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:22:43.112  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@1563f11d, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:22:43.112  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:22:43.112  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:22:43.112  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:22:43.112  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:22:43.120  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:22:43.120  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:22:43.120  INFO 15120 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:23:06.673  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:23:06.674  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6ab0f0f0, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:23:06.674  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:23:06.674  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:23:06.674  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:23:06.675  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:23:06.678  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:23:06.679  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:23:06.679  INFO 15120 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:25:26.623  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:25:26.624  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@1cd881d, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 17:25:26.625  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:25:26.626  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:25:26.626  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 17:25:26.627  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 17:25:26.631  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:25:26.631  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:25:26.632  INFO 15120 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:35:10.358  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:35:10.359  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 17:35:10.359  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 17:35:10.390  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 17:35:10.390  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 17:35:10.390  INFO 15120 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}]
2020-02-03 20:23:52.682  INFO 40856 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 40856 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 20:23:52.686 DEBUG 40856 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 20:23:52.687  INFO 40856 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 20:23:52.807  INFO 40856 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 20:23:52.807  INFO 40856 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 20:23:52.808  INFO 40856 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 20:23:54.184  INFO 40856 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 20:23:54.314  INFO 40856 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 105ms. Found 4 JPA repository interfaces.
2020-02-03 20:23:54.872  INFO 40856 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 20:23:55.966  INFO 40856 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 20:23:55.981  INFO 40856 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 20:23:55.981  INFO 40856 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 20:23:56.196  INFO 40856 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 20:23:56.197  INFO 40856 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3389 ms
2020-02-03 20:23:56.835  INFO 40856 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 20:23:56.985  INFO 40856 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 20:23:57.364  INFO 40856 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 20:23:57.697  INFO 40856 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 20:24:01.271  INFO 40856 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 20:24:01.330  INFO 40856 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 20:24:04.697  INFO 40856 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 20:24:04.720  INFO 40856 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 20:24:04.756  INFO 40856 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 20:24:05.615  WARN 40856 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 20:24:05.994  INFO 40856 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 20:24:07.179  INFO 40856 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 20:24:07.183  INFO 40856 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 15.742 seconds (JVM running for 22.294)
2020-02-03 20:25:21.482  INFO 40856 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 20:25:21.483  INFO 40856 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 20:25:21.513  INFO 40856 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 30 ms
2020-02-03 20:25:27.120  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:27.121  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 20:25:27.122  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:25:27.122  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:27.122  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 20:25:27.122  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:25:30.068  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:30.069  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@107c437f, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:25:30.069  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:25:30.070  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:30.070  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:25:30.070  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:25:30.096  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:30.097  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:25:30.097  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:25:34.858  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:34.859  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@47c02374, Page request [number: 1, size 2, sort: updateTime: DESC]]}
2020-02-03 20:25:34.859  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:25:34.859  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:34.859  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 1, size 2, sort: updateTime: DESC], BlogQuery(title=, typeId=null, recommend=false)]}
2020-02-03 20:25:34.859  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 2 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:25:37.932  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:37.933  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:25:37.933  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:25:37.959  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:37.959  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:25:37.960  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}]
2020-02-03 20:25:37.978  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:37.978  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:25:37.978  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='null', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-02 23:00:37.468, updateTime=2020-02-02 23:00:37.468}]
2020-02-03 20:25:37.979  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:25:37.979  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:25:37.979  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='null', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-02 23:00:37.468, updateTime=2020-02-02 23:00:37.468}
2020-02-03 20:26:17.217  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:17.218  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:26:17.218  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:26:17.228  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:17.228  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:26:17.228  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}]
2020-02-03 20:26:17.234  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:17.234  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:26:17.234  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='null', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-02 23:00:37.468, updateTime=2020-02-02 23:00:37.468}]
2020-02-03 20:26:17.241  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:17.242  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:26:17.242  INFO 40856 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='null', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-02 23:00:37.468, updateTime=2020-02-02 23:00:37.468}
2020-02-03 20:26:46.156  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:46.156  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[2]}
2020-02-03 20:26:46.156  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Type{id=2, name='开发日志'}]
2020-02-03 20:26:46.157  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:46.157  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.getType', args=[2]}
2020-02-03 20:26:46.157  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Type{id=2, name='开发日志'}
2020-02-03 20:26:46.194  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:46.194  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[9]}
2020-02-03 20:26:46.194  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}]
2020-02-03 20:26:46.215  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:46.215  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=Mon Feb 03 20:26:46 CST 2020}]}
2020-02-03 20:26:46.216  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=Mon Feb 03 20:26:46 CST 2020}
2020-02-03 20:26:46.220  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:46.220  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.saveBlog', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=Mon Feb 03 20:26:46 CST 2020}]}
2020-02-03 20:26:46.220  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=Mon Feb 03 20:26:46 CST 2020}
2020-02-03 20:26:47.520  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:47.521  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@1df368de, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:26:47.521  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:26:47.522  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:47.522  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:26:47.522  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:26:47.526  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:26:47.526  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:26:47.526  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:28:27.348  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:27.349  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.PagingAndSortingRepository.findAll', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:28:27.349  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Tag instances
2020-02-03 20:28:27.350  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:27.350  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:28:27.350  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Tag instances
2020-02-03 20:28:46.275  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:46.276  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.TagRepository.findByName', args=[重点]}
2020-02-03 20:28:46.276  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:null
2020-02-03 20:28:46.276  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:46.276  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.getTagByName', args=[重点]}
2020-02-03 20:28:46.276  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:null
2020-02-03 20:28:46.402  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:46.403  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Tag{id=15, name='重点'}]}
2020-02-03 20:28:46.403  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Tag{id=15, name='重点'}
2020-02-03 20:28:46.403  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:46.403  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.saveTag', args=[Tag{id=15, name='重点'}]}
2020-02-03 20:28:46.403  INFO 40856 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Tag{id=15, name='重点'}
2020-02-03 20:28:46.518  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:46.518  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.PagingAndSortingRepository.findAll', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:28:46.519  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Tag instances
2020-02-03 20:28:46.519  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:46.519  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:28:46.519  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Tag instances
2020-02-03 20:28:52.833  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:52.834  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.TagRepository.findByName', args=[薄弱点]}
2020-02-03 20:28:52.834  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:null
2020-02-03 20:28:52.834  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:52.834  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.getTagByName', args=[薄弱点]}
2020-02-03 20:28:52.834  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:null
2020-02-03 20:28:52.864  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:52.864  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Tag{id=16, name='薄弱点'}]}
2020-02-03 20:28:52.865  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Tag{id=16, name='薄弱点'}
2020-02-03 20:28:52.865  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:52.865  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.saveTag', args=[Tag{id=16, name='薄弱点'}]}
2020-02-03 20:28:52.865  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Tag{id=16, name='薄弱点'}
2020-02-03 20:28:52.932  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:52.932  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.PagingAndSortingRepository.findAll', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:28:52.933  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Tag instances
2020-02-03 20:28:52.933  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:28:52.933  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:28:52.933  INFO 40856 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Tag instances
2020-02-03 20:29:04.371  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:04.372  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.TagRepository.findByName', args=[擅长点]}
2020-02-03 20:29:04.372  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:null
2020-02-03 20:29:04.372  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:04.372  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.getTagByName', args=[擅长点]}
2020-02-03 20:29:04.372  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:null
2020-02-03 20:29:04.458  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:04.458  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Tag{id=17, name='擅长点'}]}
2020-02-03 20:29:04.458  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Tag{id=17, name='擅长点'}
2020-02-03 20:29:04.458  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:04.458  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.saveTag', args=[Tag{id=17, name='擅长点'}]}
2020-02-03 20:29:04.459  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Tag{id=17, name='擅长点'}
2020-02-03 20:29:04.534  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:04.535  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.PagingAndSortingRepository.findAll', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:29:04.535  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Tag instances
2020-02-03 20:29:04.535  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:04.535  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:29:04.535  INFO 40856 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Tag instances
2020-02-03 20:29:11.462  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:11.462  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.PagingAndSortingRepository.findAll', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:29:11.463  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Type instances
2020-02-03 20:29:11.464  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:11.464  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/types', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[Page request [number: 0, size 5, sort: id: DESC]]}
2020-02-03 20:29:11.465  INFO 40856 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 1 containing com.bob.blog.entity.Type instances
2020-02-03 20:29:12.888  INFO 40856 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:12.888  INFO 40856 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@1c1be7d9, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:29:12.889  INFO 40856 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:29:12.889  INFO 40856 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:12.889  INFO 40856 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:29:12.889  INFO 40856 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:29:12.894  INFO 40856 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:12.894  INFO 40856 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:29:12.894  INFO 40856 --- [http-nio-8080-exec-9] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:29:16.048  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:16.049  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:29:16.049  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:29:16.075  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:16.075  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:29:16.075  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:29:16.084  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:16.084  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:29:16.084  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=2020-02-03 20:26:46.198}]
2020-02-03 20:29:16.087  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:16.087  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:29:16.087  INFO 40856 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=null, updateTime=2020-02-03 20:26:46.198}
2020-02-03 20:29:31.076  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:31.076  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[2]}
2020-02-03 20:29:31.076  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Type{id=2, name='开发日志'}]
2020-02-03 20:29:31.076  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:31.076  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.getType', args=[2]}
2020-02-03 20:29:31.076  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Type{id=2, name='开发日志'}
2020-02-03 20:29:31.087  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:31.089  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[9,15,16,17]}
2020-02-03 20:29:31.090  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:29:31.099  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:31.099  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:29:31 CST 2020}]}
2020-02-03 20:29:31.100  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:29:31 CST 2020}
2020-02-03 20:29:31.100  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:31.100  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.saveBlog', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:29:31 CST 2020}]}
2020-02-03 20:29:31.100  INFO 40856 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:29:31 CST 2020}
2020-02-03 20:29:31.247  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:31.248  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@1773f30f, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:29:31.248  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:29:31.248  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:31.248  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:29:31.248  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:29:31.253  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:31.253  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:29:31.253  INFO 40856 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:29:36.333  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:36.333  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:29:36.333  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:29:36.341  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:36.341  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:29:36.341  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:29:36.352  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:36.352  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:29:36.352  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:29:31.091}]
2020-02-03 20:29:36.354  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:29:36.354  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:29:36.355  INFO 40856 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:29:31.091}
2020-02-03 20:33:09.584  INFO 40516 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 40516 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 20:33:09.588 DEBUG 40516 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 20:33:09.589  INFO 40516 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 20:33:09.661  INFO 40516 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 20:33:09.661  INFO 40516 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 20:33:09.662  INFO 40516 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 20:33:10.635  INFO 40516 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 20:33:10.775  INFO 40516 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 122ms. Found 4 JPA repository interfaces.
2020-02-03 20:33:11.561  INFO 40516 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 20:33:12.517  INFO 40516 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 20:33:12.535  INFO 40516 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 20:33:12.536  INFO 40516 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 20:33:12.843  INFO 40516 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 20:33:12.844  INFO 40516 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3182 ms
2020-02-03 20:33:13.125  INFO 40516 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 20:33:13.232  INFO 40516 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 20:33:13.422  INFO 40516 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 20:33:13.575  INFO 40516 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 20:33:15.922  INFO 40516 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 20:33:15.962  INFO 40516 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 20:33:18.275  INFO 40516 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 20:33:18.287  INFO 40516 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 20:33:18.332  INFO 40516 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 20:33:19.477  WARN 40516 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 20:33:19.886  INFO 40516 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 20:33:20.902  INFO 40516 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 20:33:20.905  INFO 40516 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 12.06 seconds (JVM running for 19.199)
2020-02-03 20:33:29.619  INFO 40516 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 20:33:29.620  INFO 40516 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 20:33:29.643  INFO 40516 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 23 ms
2020-02-03 20:33:36.398  INFO 40516 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:36.399  INFO 40516 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 20:33:36.399  INFO 40516 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:33:36.400  INFO 40516 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:36.400  INFO 40516 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 20:33:36.400  INFO 40516 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:33:42.801  INFO 40516 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:42.802  INFO 40516 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@4247caf4, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:33:42.803  INFO 40516 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:33:42.804  INFO 40516 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:42.804  INFO 40516 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:33:42.804  INFO 40516 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:33:42.829  INFO 40516 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:42.829  INFO 40516 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:33:42.829  INFO 40516 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:33:45.455  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:45.456  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:33:45.458  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:33:45.581  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:45.582  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:33:45.582  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:33:45.594  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:45.595  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:33:45.595  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:29:31.091}]
2020-02-03 20:33:45.600  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:45.600  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:33:45.600  INFO 40516 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:29:31.091}
2020-02-03 20:33:54.363  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:54.363  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[2]}
2020-02-03 20:33:54.363  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Type{id=2, name='开发日志'}]
2020-02-03 20:33:54.364  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:33:54.364  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.getType', args=[2]}
2020-02-03 20:33:54.364  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Type{id=2, name='开发日志'}
2020-02-03 20:35:04.268  WARN 40516 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m18s131ms106µs400ns).
2020-02-03 20:36:18.826  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:36:18.826  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[9,15,16]}
2020-02-03 20:36:18.826  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}]
2020-02-03 20:38:31.395  WARN 40516 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m12s595ms445µs400ns).
2020-02-03 20:38:36.983  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:38:36.983  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:38:36 CST 2020}]}
2020-02-03 20:38:36.984  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:38:36 CST 2020}
2020-02-03 20:38:36.985  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:38:36.985  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.saveBlog', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:38:36 CST 2020}]}
2020-02-03 20:38:36.985  INFO 40516 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:38:36 CST 2020}
2020-02-03 20:38:47.627  INFO 34132 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 34132 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 20:38:47.631 DEBUG 34132 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 20:38:47.632  INFO 34132 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 20:38:47.761  INFO 34132 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 20:38:47.762  INFO 34132 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 20:38:47.762  INFO 34132 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 20:38:49.225  INFO 34132 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 20:38:49.383  INFO 34132 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 142ms. Found 4 JPA repository interfaces.
2020-02-03 20:38:50.048  INFO 34132 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 20:38:51.814  INFO 34132 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 20:38:51.839  INFO 34132 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 20:38:51.840  INFO 34132 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 20:38:52.204  INFO 34132 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 20:38:52.204  INFO 34132 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4442 ms
2020-02-03 20:38:52.742  INFO 34132 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 20:38:52.857  INFO 34132 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 20:38:53.082  INFO 34132 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 20:38:53.345  INFO 34132 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 20:38:56.462  INFO 34132 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 20:38:56.493  INFO 34132 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 20:38:58.484  INFO 34132 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 20:38:58.495  INFO 34132 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 20:38:58.545  INFO 34132 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 20:38:59.612  WARN 34132 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 20:38:59.943  INFO 34132 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 20:39:01.023  INFO 34132 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 20:39:01.026  INFO 34132 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 14.64 seconds (JVM running for 20.417)
2020-02-03 20:39:44.730  INFO 34132 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 20:39:44.730  INFO 34132 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 20:39:44.758  INFO 34132 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 28 ms
2020-02-03 20:39:51.141  INFO 34132 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:39:51.141  INFO 34132 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 20:39:51.142  INFO 34132 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:39:51.142  INFO 34132 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:39:51.142  INFO 34132 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 20:39:51.142  INFO 34132 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:39:56.039  INFO 34132 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:39:56.040  INFO 34132 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@31971bc, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:39:56.041  INFO 34132 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:39:56.041  INFO 34132 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:39:56.042  INFO 34132 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:39:56.042  INFO 34132 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:39:56.067  INFO 34132 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:39:56.067  INFO 34132 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:39:56.068  INFO 34132 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:39:59.495  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:39:59.496  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:39:59.496  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:39:59.515  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:39:59.516  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:39:59.516  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:39:59.530  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:39:59.531  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:39:59.531  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:29:31.091}]
2020-02-03 20:39:59.535  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:39:59.535  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:39:59.536  INFO 34132 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:29:31.091}
2020-02-03 20:40:06.019  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:06.019  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[2]}
2020-02-03 20:40:06.020  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Type{id=2, name='开发日志'}]
2020-02-03 20:40:06.020  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:06.020  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.getType', args=[2]}
2020-02-03 20:40:06.020  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Type{id=2, name='开发日志'}
2020-02-03 20:40:06.071  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:06.071  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[9,15,16,17]}
2020-02-03 20:40:06.072  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:40:06.098  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:06.098  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:40:06 CST 2020}]}
2020-02-03 20:40:06.098  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:40:06 CST 2020}
2020-02-03 20:40:06.103  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:06.103  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.saveBlog', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:40:06 CST 2020}]}
2020-02-03 20:40:06.103  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:40:06 CST 2020}
2020-02-03 20:40:06.303  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:06.303  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@23d2bcd4, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:40:06.303  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:40:06.304  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:06.304  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:40:06.305  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:40:06.311  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:06.312  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:40:06.312  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:40:08.713  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:08.713  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:40:08.714  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:40:08.726  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:08.726  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:40:08.727  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:40:08.736  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:08.737  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:40:08.737  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:40:06.073}]
2020-02-03 20:40:08.738  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:40:08.738  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:40:08.739  INFO 34132 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:40:06.073}
2020-02-03 20:41:38.553  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:38.554  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[2]}
2020-02-03 20:41:38.554  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Type{id=2, name='开发日志'}]
2020-02-03 20:41:38.555  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:38.555  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.getType', args=[2]}
2020-02-03 20:41:38.555  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Type{id=2, name='开发日志'}
2020-02-03 20:41:38.566  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:38.567  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[9,15,16,17]}
2020-02-03 20:41:38.567  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:41:38.577  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:38.579  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:41:38 CST 2020}]}
2020-02-03 20:41:38.581  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:41:38 CST 2020}
2020-02-03 20:41:38.582  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:38.582  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.saveBlog', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:41:38 CST 2020}]}
2020-02-03 20:41:38.583  INFO 34132 --- [http-nio-8080-exec-7] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:41:38 CST 2020}
2020-02-03 20:41:38.674  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:38.675  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@13ca229b, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:41:38.675  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:41:38.675  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:38.675  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:41:38.675  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:41:38.681  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:38.681  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:41:38.681  INFO 34132 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:41:42.135  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:42.135  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:41:42.135  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:41:42.145  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:42.146  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:41:42.146  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:41:42.155  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:42.155  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:41:42.155  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:41:38.568}]
2020-02-03 20:41:42.156  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:41:42.156  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:41:42.156  INFO 34132 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:41:38.568}
2020-02-03 20:42:32.275  INFO 23464 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 23464 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 20:42:32.279 DEBUG 23464 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 20:42:32.280  INFO 23464 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 20:42:32.374  INFO 23464 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 20:42:32.374  INFO 23464 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 20:42:32.374  INFO 23464 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 20:42:33.494  INFO 23464 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 20:42:33.615  INFO 23464 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 109ms. Found 4 JPA repository interfaces.
2020-02-03 20:42:34.144  INFO 23464 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 20:42:34.941  INFO 23464 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 20:42:34.952  INFO 23464 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 20:42:34.952  INFO 23464 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 20:42:35.245  INFO 23464 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 20:42:35.245  INFO 23464 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2870 ms
2020-02-03 20:42:35.521  INFO 23464 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 20:42:35.661  INFO 23464 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 20:42:35.856  INFO 23464 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 20:42:36.027  INFO 23464 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 20:42:38.510  INFO 23464 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 20:42:38.543  INFO 23464 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 20:42:40.022  INFO 23464 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 20:42:40.034  INFO 23464 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 20:42:40.078  INFO 23464 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 20:42:41.001  WARN 23464 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 20:42:41.362  INFO 23464 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 20:42:42.198  INFO 23464 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 20:42:42.202  INFO 23464 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 10.971 seconds (JVM running for 15.69)
2020-02-03 20:42:52.157  INFO 23464 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 20:42:52.157  INFO 23464 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 20:42:52.181  INFO 23464 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 24 ms
2020-02-03 20:42:57.354  INFO 23464 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:42:57.354  INFO 23464 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 20:42:57.355  INFO 23464 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:42:57.355  INFO 23464 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:42:57.356  INFO 23464 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 20:42:57.356  INFO 23464 --- [http-nio-8080-exec-3] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:43:04.177  INFO 23464 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:04.177  INFO 23464 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@321cd072, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:43:04.177  INFO 23464 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:43:04.178  INFO 23464 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:04.178  INFO 23464 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:43:04.178  INFO 23464 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:43:04.201  INFO 23464 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:04.202  INFO 23464 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:43:04.202  INFO 23464 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:43:10.565  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:10.565  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:43:10.565  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:43:10.602  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:10.603  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:43:10.604  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:43:10.619  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:10.620  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:43:10.620  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:41:38.568}]
2020-02-03 20:43:10.623  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:10.624  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:43:10.624  INFO 23464 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:41:38.568}
2020-02-03 20:43:18.670  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:18.671  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[2]}
2020-02-03 20:43:18.671  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Type{id=2, name='开发日志'}]
2020-02-03 20:43:18.671  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:18.671  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.getType', args=[2]}
2020-02-03 20:43:18.671  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Type{id=2, name='开发日志'}
2020-02-03 20:43:18.743  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:43:18.744  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[9,15,16,17]}
2020-02-03 20:43:18.744  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:44:01.665  WARN 23464 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=53s48ms455µs100ns).
2020-02-03 20:44:06.082  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:06.082  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:44:06 CST 2020}]}
2020-02-03 20:44:06.082  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:44:06 CST 2020}
2020-02-03 20:44:06.083  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:06.083  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.saveBlog', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:44:06 CST 2020}]}
2020-02-03 20:44:06.083  INFO 23464 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:44:06 CST 2020}
2020-02-03 20:44:06.250  INFO 23464 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:06.250  INFO 23464 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@54442e27, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:44:06.251  INFO 23464 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:44:06.251  INFO 23464 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:06.251  INFO 23464 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:44:06.252  INFO 23464 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:44:06.257  INFO 23464 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:06.258  INFO 23464 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:44:06.258  INFO 23464 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:44:11.266  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:11.267  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:44:11.267  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:44:11.276  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:11.277  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:44:11.277  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:44:11.286  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:11.287  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:44:11.287  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:44:06.057}]
2020-02-03 20:44:11.293  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:11.293  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:44:11.293  INFO 23464 --- [http-nio-8080-exec-1] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='转载', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:44:06.057}
2020-02-03 20:44:15.912  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:15.913  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[2]}
2020-02-03 20:44:15.913  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Type{id=2, name='开发日志'}]
2020-02-03 20:44:15.913  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:15.913  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.getType', args=[2]}
2020-02-03 20:44:15.913  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Type{id=2, name='开发日志'}
2020-02-03 20:44:15.928  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:15.929  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[9,15,16,17]}
2020-02-03 20:44:15.929  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:44:32.654  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:32.655  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.save', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='原创', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:44:32 CST 2020}]}
2020-02-03 20:44:32.655  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='原创', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:44:32 CST 2020}
2020-02-03 20:44:32.659  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:32.659  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.saveBlog', args=[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='原创', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:44:32 CST 2020}]}
2020-02-03 20:44:32.659  INFO 23464 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='原创', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=Mon Feb 03 20:44:32 CST 2020}
2020-02-03 20:44:32.744  INFO 23464 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:32.744  INFO 23464 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@28a7fb38, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:44:32.745  INFO 23464 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:44:32.745  INFO 23464 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:32.745  INFO 23464 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:44:32.745  INFO 23464 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:44:32.751  INFO 23464 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:44:32.752  INFO 23464 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:44:32.752  INFO 23464 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:48:34.197  INFO 17348 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 17348 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 20:48:34.203 DEBUG 17348 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 20:48:34.203  INFO 17348 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 20:48:34.292  INFO 17348 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 20:48:34.292  INFO 17348 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 20:48:34.293  INFO 17348 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 20:48:35.493  INFO 17348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 20:48:35.636  INFO 17348 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 126ms. Found 4 JPA repository interfaces.
2020-02-03 20:48:36.341  INFO 17348 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 20:48:37.461  INFO 17348 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 20:48:37.487  INFO 17348 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 20:48:37.489  INFO 17348 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 20:48:37.792  INFO 17348 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 20:48:37.793  INFO 17348 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3500 ms
2020-02-03 20:48:38.222  INFO 17348 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 20:48:38.353  INFO 17348 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 20:48:38.610  INFO 17348 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 20:48:38.808  INFO 17348 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 20:48:41.928  INFO 17348 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 20:48:41.989  INFO 17348 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 20:48:44.594  INFO 17348 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 20:48:44.606  INFO 17348 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 20:48:44.659  INFO 17348 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 20:48:46.218  WARN 17348 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 20:48:47.035  INFO 17348 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 20:48:49.204  INFO 17348 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 20:48:49.214  INFO 17348 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 15.921 seconds (JVM running for 19.598)
2020-02-03 20:49:02.087  INFO 17348 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 20:49:02.087  INFO 17348 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 20:49:02.105  INFO 17348 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2020-02-03 20:49:09.801  INFO 17348 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:09.802  INFO 17348 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.dao.UserRepository.findByUsernameAndPassword', args=[bobjiang, e10adc3949ba59abbe56e057f20f883e]}
2020-02-03 20:49:09.803  INFO 17348 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:49:09.803  INFO 17348 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:09.804  INFO 17348 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.UserServiceImpl.CheckUser', args=[bobjiang, 123456]}
2020-02-03 20:49:09.804  INFO 17348 --- [http-nio-8080-exec-10] com.bob.blog.aspect.LogAspect            : RequestReturn:User{id=1, nickname='bob', username='bobjiang', password='e10adc3949ba59abbe56e057f20f883e', email='11@11.com', avatar='https://unsplash.it/100/100?image=1008', type=1, createTime=2020-01-31 08:00:00.0, updateTime=2020-01-31 08:00:00.0}
2020-02-03 20:49:14.011  INFO 17348 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:14.012  INFO 17348 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@6301f652, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:49:14.012  INFO 17348 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:49:14.013  INFO 17348 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:14.013  INFO 17348 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:49:14.013  INFO 17348 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:49:14.040  INFO 17348 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:14.041  INFO 17348 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:49:14.041  INFO 17348 --- [http-nio-8080-exec-5] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:49:25.871  INFO 17348 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:25.871  INFO 17348 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/14/delete', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.deleteById', args=[14]}
2020-02-03 20:49:25.871  INFO 17348 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:null
2020-02-03 20:49:25.872  INFO 17348 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:25.872  INFO 17348 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/14/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.deleteBlog', args=[14]}
2020-02-03 20:49:25.891  INFO 17348 --- [http-nio-8080-exec-2] com.bob.blog.aspect.LogAspect            : RequestReturn:null
2020-02-03 20:49:26.070  INFO 17348 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:26.070  INFO 17348 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.jpa.repository.JpaSpecificationExecutor.findAll', args=[com.bob.blog.service.BlogServiceImpl$1@19526ee7, Page request [number: 0, size 2, sort: updateTime: DESC]]}
2020-02-03 20:49:26.070  INFO 17348 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:49:26.070  INFO 17348 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:26.070  INFO 17348 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.listBlog', args=[Page request [number: 0, size 2, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false)]}
2020-02-03 20:49:26.071  INFO 17348 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:Page 1 of 2 containing com.bob.blog.entity.Blog instances
2020-02-03 20:49:26.078  INFO 17348 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:26.078  INFO 17348 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:49:26.079  INFO 17348 --- [http-nio-8080-exec-6] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:49:32.045  INFO 17348 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:32.045  INFO 17348 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:49:32.046  INFO 17348 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:49:32.070  INFO 17348 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:49:32.070  INFO 17348 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:49:32.071  INFO 17348 --- [http-nio-8080-exec-8] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:49:32.139 ERROR 17348 --- [http-nio-8080-exec-8] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-8] Exception processing template "admin/blogs-input": An error happened during template parsing (template: "class path resource [templates/admin/blogs-input.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/admin/blogs-input.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "type.id" (template: "admin/blogs-input" - line 52, col 61)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "type.id" (template: "admin/blogs-input" - line 52, col 61)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.SelectionVariableExpression.executeSelectionVariableExpression(SelectionVariableExpression.java:158)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:92)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'id' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 69 common frames omitted

2020-02-03 20:49:32.146 ERROR 17348 --- [http-nio-8080-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/admin/blogs-input.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'id' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.SelectionVariableExpression.executeSelectionVariableExpression(SelectionVariableExpression.java:158)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:92)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-03 20:50:54.878  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:50:54.879  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TypeServiceImpl.listType', args=[]}
2020-02-03 20:50:54.879  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Type{id=2, name='开发日志'}, Type{id=5, name='计算机组成原理'}, Type{id=6, name='计算机网络'}, Type{id=7, name='编译原理入门'}, Type{id=8, name='阅读进阶'}]
2020-02-03 20:50:54.891  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:50:54.891  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.TagServiceImpl.listTag', args=[]}
2020-02-03 20:50:54.891  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:[Tag{id=9, name='常用'}, Tag{id=15, name='重点'}, Tag{id=16, name='薄弱点'}, Tag{id=17, name='擅长点'}]
2020-02-03 20:50:54.903  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:50:54.904  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='org.springframework.data.repository.CrudRepository.findById', args=[11]}
2020-02-03 20:50:54.905  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Optional[Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='原创', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:44:32.641}]
2020-02-03 20:50:54.908  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : --------------doAfter-----------
2020-02-03 20:50:54.908  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestResult:RequestLog{url='http://localhost:8080/admin/blogs/11/input', ip='0:0:0:0:0:0:0:1', classMethod='com.bob.blog.service.BlogServiceImpl.getBlog', args=[11]}
2020-02-03 20:50:54.909  INFO 17348 --- [http-nio-8080-exec-4] com.bob.blog.aspect.LogAspect            : RequestReturn:Blog{id=11, title='1133 Splitting A Linked List (25 分)', content='## 1017 Queueing at Bank （25 分）
Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.

Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.

#### Input Specification:
Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤10^4) - the total number of customers, and K (≤100) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.

Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.

#### Output Specification:
For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.

#### Sample Input:

```
7 3
07:55:00 16
17:00:01 2
07:59:59 15
08:01:00 60
08:00:00 30
08:00:02 2
08:03:00 10
```

#### Sample Output:

```
8.2
```

### 代码：
```
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct node{
	int come,time;
}tempcustomer;
bool cmp(node a,node b){
	return a.come<b.come;
}
int main(){
	int n,k;
	cin>>n>>k;
	vector<node>custom;
	for(int i=0;i<n;i++){						//将时间全部转换成秒数 
		 int hh,mm,ss,time;
		 scanf("%d:%d:%d %d",&hh,&mm,&ss,&time);
		 int cometime=hh*3600+mm*60+ss;
		 if(cometime>61200)continue;
		 tempcustomer={cometime,time*60};
		 custom.push_back(tempcustomer);
	}
	sort(custom.begin(),custom.end(),cmp);
	
	vector<int> window(k,28800);				//每个窗口时间初始为0点~8点的秒数
	double result=0.0;							//记录等待总时间 
	for(int i=0;i<custom.size();i++){
		int index=0,minifinish=window[0];
		for(int j=1;j<k;j++){					//找到最早结束的窗口 
			if(window[j]<minifinish){
				minifinish=window[j];
				index=j;
			}
		}
		if(window[index]<=custom[i].come){		//如果窗口结束时间早于顾客到来时间,更新窗口处理完时间 
			window[index]=custom[i].come+custom[i].time;
		}else{
			//累加等待时间
			result+=(window[index]-custom[i].come);
			window[index]+=custom[i].time; 
		}
	}
	if(custom.size()==0){
		cout<<"0.0";
	}else{
		printf("%.1f",result/60.0/custom.size());
	} 
} 
```
### 总结：
- 【模拟】【逻辑】
- 关键在于选择人数更少的窗口、增加等待时间后的更新窗口时间的逻辑。
- 应用vector进行筛选，如果时间太晚就不会加入customer数组。', firstPicture='https://unsplash.it/800/400', flag='原创', views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, createTime=null, updateTime=2020-02-03 20:44:32.641}
2020-02-03 20:52:11.777  INFO 20212 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 20212 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 20:52:11.784 DEBUG 20212 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 20:52:11.785  INFO 20212 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 20:52:11.894  INFO 20212 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 20:52:11.895  INFO 20212 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 20:52:11.895  INFO 20212 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 20:52:13.326  INFO 20212 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 20:52:13.480  INFO 20212 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 136ms. Found 4 JPA repository interfaces.
2020-02-03 20:52:14.091  INFO 20212 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 20:52:14.802  INFO 20212 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 20:52:14.821  INFO 20212 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 20:52:14.822  INFO 20212 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 20:52:15.085  INFO 20212 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 20:52:15.086  INFO 20212 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3190 ms
2020-02-03 20:52:15.538  INFO 20212 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 20:52:15.700  INFO 20212 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 20:52:15.965  INFO 20212 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 20:52:16.185  INFO 20212 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 20:52:19.102  INFO 20212 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 20:52:19.141  INFO 20212 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 20:52:21.184  INFO 20212 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 20:52:21.197  INFO 20212 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 20:52:21.224  INFO 20212 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 20:52:22.240  WARN 20212 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 20:52:22.506  INFO 20212 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 20:52:23.156  INFO 20212 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 20:52:23.161  INFO 20212 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 12.781 seconds (JVM running for 17.443)
2020-02-03 20:52:36.735  INFO 20212 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 20:52:36.736  INFO 20212 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 20:52:36.750  INFO 20212 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-02-03 20:53:40.811  WARN 20212 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=51s605ms485µs700ns).
2020-02-03 20:53:58.054 ERROR 20212 --- [http-nio-8080-exec-1] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-1] Exception processing template "admin/blogs-input": An error happened during template parsing (template: "class path resource [templates/admin/blogs-input.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/admin/blogs-input.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "type.id" (template: "admin/blogs-input" - line 52, col 61)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "type.id" (template: "admin/blogs-input" - line 52, col 61)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.SelectionVariableExpression.executeSelectionVariableExpression(SelectionVariableExpression.java:158)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:92)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'id' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 69 common frames omitted

2020-02-03 20:53:58.066 ERROR 20212 --- [http-nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/admin/blogs-input.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'id' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.SelectionVariableExpression.executeSelectionVariableExpression(SelectionVariableExpression.java:158)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:92)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-03 20:54:24.864 ERROR 20212 --- [http-nio-8080-exec-3] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-3] Exception processing template "admin/blogs-input": An error happened during template parsing (template: "class path resource [templates/admin/blogs-input.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/admin/blogs-input.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "type.id" (template: "admin/blogs-input" - line 52, col 61)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "type.id" (template: "admin/blogs-input" - line 52, col 61)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.SelectionVariableExpression.executeSelectionVariableExpression(SelectionVariableExpression.java:158)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:92)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'id' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 69 common frames omitted

2020-02-03 20:54:24.868 ERROR 20212 --- [http-nio-8080-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/admin/blogs-input.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'id' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.SelectionVariableExpression.executeSelectionVariableExpression(SelectionVariableExpression.java:158)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:92)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-03 20:57:14.532  INFO 10296 --- [restartedMain] com.bob.blog.BlogApplication             : Starting BlogApplication on JMYOK with PID 10296 (E:\java_Web\blog\target\classes started by dell in E:\java_Web\blog)
2020-02-03 20:57:14.537 DEBUG 10296 --- [restartedMain] com.bob.blog.BlogApplication             : Running with Spring Boot v2.2.3.BUILD-SNAPSHOT, Spring v5.2.3.RELEASE
2020-02-03 20:57:14.537  INFO 10296 --- [restartedMain] com.bob.blog.BlogApplication             : The following profiles are active: dev
2020-02-03 20:57:14.667  INFO 10296 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/dell/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-03 20:57:14.668  INFO 10296 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-03 20:57:14.669  INFO 10296 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-03 20:57:16.036  INFO 10296 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-03 20:57:16.215  INFO 10296 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 162ms. Found 4 JPA repository interfaces.
2020-02-03 20:57:16.742  INFO 10296 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-03 20:57:17.363  INFO 10296 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-03 20:57:17.379  INFO 10296 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-03 20:57:17.380  INFO 10296 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-03 20:57:17.594  INFO 10296 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-03 20:57:17.595  INFO 10296 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2925 ms
2020-02-03 20:57:17.820  INFO 10296 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-03 20:57:18.020  INFO 10296 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-03 20:57:18.231  INFO 10296 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-03 20:57:18.388  INFO 10296 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-03 20:57:21.122  INFO 10296 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-03 20:57:21.154  INFO 10296 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-02-03 20:57:22.749  INFO 10296 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-03 20:57:22.797  INFO 10296 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-03 20:57:22.834  INFO 10296 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-03 20:57:23.571  WARN 10296 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-03 20:57:23.736  INFO 10296 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-03 20:57:24.217  INFO 10296 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-03 20:57:24.220  INFO 10296 --- [restartedMain] com.bob.blog.BlogApplication             : Started BlogApplication in 10.881 seconds (JVM running for 15.005)
2020-02-03 20:58:57.688  INFO 10296 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-03 20:58:57.688  INFO 10296 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-03 20:58:57.710  INFO 10296 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 21 ms
2020-02-03 21:00:55.740 ERROR 10296 --- [http-nio-8080-exec-9] c.b.b.h.ControllerExceptionHandler       : Request URL: http://localhost:8080/admin/blogs/,    Exception: {}

java.lang.NumberFormatException: For input string: "入门"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:589)
	at java.lang.Long.<init>(Long.java:965)
	at com.bob.blog.service.TagServiceImpl.convertToList(TagServiceImpl.java:75)
	at com.bob.blog.service.TagServiceImpl.listTag(TagServiceImpl.java:62)
	at com.bob.blog.service.TagServiceImpl$$FastClassBySpringCGLIB$$4d50f59a.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.bob.blog.service.TagServiceImpl$$EnhancerBySpringCGLIB$$580159d.listTag(<generated>)
	at com.bob.blog.web.admin.BlogController.post(BlogController.java:124)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-03 21:00:55.745  WARN 10296 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NumberFormatException: For input string: "入门"]
